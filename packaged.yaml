AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'frab-api

  Sample SAM Template for frab-api

  '
Globals:
  Function:
    Timeout: 3
Parameters:
  VpcName:
    Type: String
    Default: frab-api-vpc
  VpcCidrBlock:
    Type: String
    Default: 10.100.0.0/16
  PrivateSubnet1CIDR:
    Description: CIDR block for Private Subnet
    Type: String
    Default: 10.100.0.0/24
  PublicSubnet1CIDR:
    Description: CIDR block for Public Subnet
    Type: String
    Default: 10.100.64.0/24
  DefaultRegion:
    Type: String
    Default: ap-southeast-1
  SearchRadius:
    Type: Number
    Default: 2
  SearchRadiusUnits:
    Type: String
    Default: km
  ResultCount:
    Type: Number
    Default: 10
Resources:
  mainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value:
          Ref: VpcName
  PublicRouteToIGW:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: IGW
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      VpcId:
        Ref: mainVPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub:
          - ${VPC_NAME} Private Subnet 1
          - VPC_NAME:
              Ref: VpcName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet1CIDR
      VpcId:
        Ref: mainVPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub:
          - ${VPC_NAME} Public Subnet 1
          - VPC_NAME:
              Ref: VpcName
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: mainVPC
      Tags:
      - Key: Name
        Value: frab-api-private-routetable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: mainVPC
      Tags:
      - Key: Name
        Value: frab-api-public-routetable
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: frab-api-igw
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - IGW
    Properties:
      VpcId:
        Ref: mainVPC
      InternetGatewayId:
        Ref: IGW
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PrivateRouteToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet1
  PublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  FunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: frab-api - Lambda Function Security Group
      VpcId:
        Ref: mainVPC
  ECCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - ECSecurityGroup
        - GroupId
      CacheSubnetGroupName:
        Ref: ECSubnetGroup
  ECSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: frab-api ElastiCache Security Group
      VpcId:
        Ref: mainVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        SourceSecurityGroupId:
          Ref: FunctionSecurityGroup
  ECSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: frab-api - ElastiCache Subnet Group
      SubnetIds:
      - Ref: PrivateSubnet1
  Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: '{ "Version":"2012-10-17", "Statement": [ { "Action": "*", "Effect":
        "Allow", "Resource": "*", "Principal": "*" } ]}'
      RouteTableIds:
      - Ref: PublicRouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.dynamodb
      VpcId:
        Ref: mainVPC
  FrabApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: '''*'''
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizerFunction
        Authorizers:
          LambdaTokenAuthorizerFunction:
            FunctionArn:
              Fn::GetAtt:
              - LambdaTokenAuthorizerFunction
              - Arn
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: '''WWW-Authenticate'''
              Access-Control-Allow-Origin: '''*'''
              WWW-Authenticate: '''Authorization'''
  LambdaTokenAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kiel-api-bucket-2/2f5c001064c724e0d421096d3fecb29b
      Handler: app.handler
      Runtime: nodejs10.x
  BookRideFunction:
    Type: AWS::Serverless::Function
    Properties:
<<<<<<< HEAD
      CodeUri: s3://kiel-api-bucket-2/7dd10f6d053ea7a95954ad01ea8e9845
=======
      CodeUri: s3://frab-api-artifact/81825f15eddc3ee64c8a2b6ff0ccdd34
>>>>>>> de577ce02958205900c8e0a6605d887d62849e5b
      Handler: app.lambda_handler
      Runtime: python3.6
      VpcConfig:
        SecurityGroupIds:
        - Ref: FunctionSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
      Events:
        FrabApi:
          Type: Api
          Properties:
            Path: /rides
            Method: post
            RestApiId:
              Ref: FrabApi
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: RidesTable
      Environment:
        Variables:
          DEFAULT_REGION:
            Ref: DefaultRegion
          RIDES_TABLE:
            Fn::Select:
            - 1
            - Fn::Split:
              - /
              - Fn::GetAtt:
                - RidesTable
                - Arn
          ELASTICACHE_HOST:
            Fn::GetAtt:
            - ECCluster
            - RedisEndpoint.Address
          ELASTICACHE_PORT:
            Fn::GetAtt:
            - ECCluster
            - RedisEndpoint.Port
<<<<<<< HEAD
  LocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kiel-api-bucket-2/7d99e716f3f56b56708a835f88fe1038
      Handler: app.lambda_handler
      Runtime: python3.6
      Timeout: 6
      VpcConfig:
        SecurityGroupIds:
        - Ref: FunctionSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
      Events:
        Location:
          Type: Api
          Properties:
            Path: /drivers/{driverId}/locations
            Method: any
            RestApiId:
              Ref: FrabApi
      Environment:
        Variables:
          DRIVERS_TABLE:
            Fn::Select:
            - 1
            - Fn::Split:
              - /
              - Fn::GetAtt:
                - DriversTable
                - Arn
          ELASTICACHE_HOST:
            Fn::GetAtt:
            - ECCluster
            - RedisEndpoint.Address
          ELASTICACHE_PORT:
            Fn::GetAtt:
            - ECCluster
            - RedisEndpoint.Port
          SEARCH_RADIUS:
            Ref: SearchRadius
          SEARCH_RADIUS_UNITS:
            Ref: SearchRadiusUnits
          RESULT_COUNT:
            Ref: ResultCount
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: DriversTable
      - AWSLambdaVPCAccessExecutionRole
=======
>>>>>>> de577ce02958205900c8e0a6605d887d62849e5b
  RidesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: ride_id
        AttributeType: S
      KeySchema:
      - AttributeName: ride_id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  DriversTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: driver_id
        AttributeType: S
      KeySchema:
      - AttributeName: driver_id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
Outputs:
  FrabApi:
    Description: API Gateway endpoint URL for Prod stage for Book Ride function
    Value:
      Fn::Sub: https://${FrabApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/rides/
  BookRideFunction:
    Description: BookRideFunction Lambda Function ARN
    Value:
      Fn::GetAtt:
      - BookRideFunction
      - Arn
  BookRideFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
      - BookRideFunctionRole
      - Arn
  CacheEndpoint:
    Description: ElastiCache Endpoint
    Value:
      Fn::GetAtt:
      - ECCluster
      - RedisEndpoint.Address
