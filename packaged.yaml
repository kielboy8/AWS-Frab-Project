AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'frab-api

  Sample SAM Template for frab-api

  '
Globals:
  Function:
    Timeout: 3
Parameters:
  VpcName:
    Type: String
    Default: frab-api-vpc
  VpcCidrBlock:
    Type: String
    Default: 10.100.0.0/16
  PrivateSubnet1CIDR:
    Description: CIDR block for Private Subnet
    Type: String
    Default: 10.100.0.0/18
  PublicSubnet1CIDR:
    Description: CIDR block for Public Subnet
    Type: String
    Default: 10.100.64.0/18
  DefaultRegion:
    Type: String
    Default: ap-southeast-1
  SearchRadius:
    Type: Number
    Default: 2
  SearchRadiusUnits:
    Type: String
    Default: km
  ResultCount:
    Type: Number
    Default: 10
Resources:
  mainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value:
          Ref: VpcName
  PublicRouteToIGW:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: IGW
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PrivateSubnet1CIDR
      VpcId:
        Ref: mainVPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub:
          - ${VPC_NAME} Private Subnet 1
          - VPC_NAME:
              Ref: VpcName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock:
        Ref: PublicSubnet1CIDR
      VpcId:
        Ref: mainVPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub:
          - ${VPC_NAME} Public Subnet 1
          - VPC_NAME:
              Ref: VpcName
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: mainVPC
      Tags:
      - Key: Name
        Value: frab-api-private-routetable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: mainVPC
      Tags:
      - Key: Name
        Value: frab-api-public-routetable
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: frab-api-igw
  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - IGW
    Properties:
      VpcId:
        Ref: mainVPC
      InternetGatewayId:
        Ref: IGW
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
    - IGW
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NatEIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
  PrivateRouteToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: PrivateRouteTable
      NatGatewayId:
        Ref: NatGateway
  PrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet1
  PublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
  FunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: frab-api - Lambda Function Security Group
      VpcId:
        Ref: mainVPC
  ECCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      Engine: redis
      CacheNodeType: cache.t2.micro
      NumCacheNodes: 1
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - ECSecurityGroup
        - GroupId
      CacheSubnetGroupName:
        Ref: ECSubnetGroup
  ECSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: frab-api ElastiCache Security Group
      VpcId:
        Ref: mainVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        SourceSecurityGroupId:
          Ref: FunctionSecurityGroup
  ECSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: frab-api - ElastiCache Subnet Group
      SubnetIds:
      - Ref: PrivateSubnet1
  FrabApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: '''*'''
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizerFunction
        Authorizers:
          LambdaTokenAuthorizerFunction:
            FunctionArn:
              Fn::GetAtt:
              - LambdaTokenAuthorizerFunction
              - Arn
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: '''WWW-Authenticate'''
              Access-Control-Allow-Origin: '''*'''
              WWW-Authenticate: '''Authorization'''
  LambdaTokenAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
<<<<<<< HEAD
      CodeUri: s3://kiel-api-bucket-2/2f5c001064c724e0d421096d3fecb29b
      Handler: app.handler
      Runtime: nodejs10.x
  GetRidesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kiel-api-bucket-2/47e44fb7a6af38cb41a96be146b0bc2f
      Handler: app.lambda_handler
      Runtime: python3.6
      Events:
        FrabApi:
          Type: Api
          Properties:
            Path: /drivers/{driverId}/rides/
            Method: get
            RestApiId:
              Ref: FrabApi
      Environment:
        Variables:
          DEFAULT_REGION:
            Ref: DefaultRegion
          BOOKING_QUEUE:
            Ref: BookingQueue
      Policies:
      - SQSPollerPolicy:
          QueueName:
            Fn::GetAtt:
            - BookingQueue
            - QueueName
  BookingQueue:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: true
      QueueName: BookingQueue.fifo
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 1
      VisibilityTimeout: 1
      MessageRetentionPeriod:
        Ref: BookingQueueExpiration
  GetRideFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kiel-api-bucket-2/9de8a71dad53ab4bf1d481a13dbaae3a
      Handler: app.lambda_handler
      Runtime: python3.6
      Events:
        FrabApi:
          Type: Api
          Properties:
            Path: /rides/{rideId}
            Method: get
            RestApiId:
              Ref: FrabApi
      Environment:
        Variables:
          DEFAULT_REGION:
            Ref: DefaultRegion
          RIDES_TABLE:
            Fn::Select:
            - 1
            - Fn::Split:
              - /
              - Fn::GetAtt:
                - RidesTable
                - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: RidesTable
  BookRideFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kiel-api-bucket-2/f4c724844d1ad205f72c178da9d103fc
=======
      CodeUri: s3://frab-api-artifact/2f5c001064c724e0d421096d3fecb29b
      Handler: app.handler
      Runtime: nodejs10.x
  BookRideFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://frab-api-artifact/1a37576ad532f8bdd03bbf57c9c852d6
>>>>>>> 1142ad6004255e2b38925f1f2006a18bc399adb9
      Handler: app.lambda_handler
      Runtime: python3.7
      VpcConfig:
        SecurityGroupIds:
        - Ref: FunctionSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
      Timeout: 6
      Events:
        FrabApi:
          Type: Api
          Properties:
            Path: /rides
            Method: post
            RestApiId:
              Ref: FrabApi
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: RidesTable
      - AWSLambdaVPCAccessExecutionRole
      Environment:
        Variables:
          DEFAULT_REGION:
            Ref: DefaultRegion
          RIDES_TABLE:
            Fn::Select:
            - 1
            - Fn::Split:
              - /
              - Fn::GetAtt:
                - RidesTable
                - Arn
<<<<<<< HEAD
  AcceptRideRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kiel-api-bucket-2/8d080493bce5d69643e742d7a406518d
      Handler: app.lambda_handler
      Runtime: python3.6
      Events:
        FrabApi:
          Type: Api
          Properties:
            Path: /drivers/{driverId}/rides/{rideId}
            Method: put
            RestApiId:
              Ref: FrabApi
      Environment:
        Variables:
          DEFAULT_REGION:
            Ref: DefaultRegion
          RIDES_TABLE:
            Fn::Select:
            - 1
            - Fn::Split:
              - /
              - Fn::GetAtt:
                - RidesTable
                - Arn
          DRIVERS_TABLE:
            Fn::Select:
            - 1
            - Fn::Split:
              - /
              - Fn::GetAtt:
                - DriversTable
                - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: RidesTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DriversTable
  LocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://kiel-api-bucket-2/dd411ada9ac2c62903b9bd74a23f3140
      Handler: app.lambda_handler
      Runtime: python3.6
      Events:
        Location:
          Type: Api
          Properties:
            Path: /drivers/{driverId}/locations
            Method: put
            RestApiId:
              Ref: FrabApi
      Environment:
        Variables:
          DRIVERS_TABLE:
            Fn::Select:
            - 1
            - Fn::Split:
              - /
              - Fn::GetAtt:
                - DriversTable
                - Arn
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: DriversTable
=======
          ELASTICACHE_HOST:
            Fn::GetAtt:
            - ECCluster
            - RedisEndpoint.Address
          ELASTICACHE_PORT:
            Fn::GetAtt:
            - ECCluster
            - RedisEndpoint.Port
          SEARCH_RADIUS:
            Ref: SearchRadius
          SEARCH_RADIUS_UNITS:
            Ref: SearchRadiusUnits
          RESULT_COUNT:
            Ref: ResultCount
>>>>>>> 1142ad6004255e2b38925f1f2006a18bc399adb9
  RidesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: ride_id
        AttributeType: S
      KeySchema:
      - AttributeName: ride_id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
Outputs:
  FrabApi:
    Description: API Gateway endpoint URL for Prod stage for Book Ride function
    Value:
      Fn::Sub: https://${FrabApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/rides/
  BookRideFunction:
    Description: BookRideFunction Lambda Function ARN
    Value:
      Fn::GetAtt:
      - BookRideFunction
      - Arn
  BookRideFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
      - BookRideFunctionRole
      - Arn
  CacheEndpoint:
    Description: ElastiCache Endpoint
    Value:
      Fn::GetAtt:
      - ECCluster
      - RedisEndpoint.Address
