AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  frab-api

  Sample SAM Template for frab-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
Parameters:
  BookingQueueExpiration:
    Type: Number
    Default: 120 #Expressed in seconds
  DefaultRegion: 
    Type: String
    Default: "ap-southeast-1"
Resources:
  GetRidesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: get_ride/
      Handler: app.lambda_handler
      Runtime: python3.6
      Events:
        FrabApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /drivers/{driverId}/rides/
            Method: get
      Environment: 
        Variables:
            DEFAULT_REGION: !Ref DefaultRegion
            BOOKING_QUEUE: !Ref BookingQueue
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt BookingQueue.QueueName
  BookingQueue:
    Type: AWS::SQS::Queue
    Properties:
      ContentBasedDeduplication: true
      QueueName: BookingQueue.fifo
      FifoQueue: true
      ReceiveMessageWaitTimeSeconds: 1
      VisibilityTimeout: 1
      MessageRetentionPeriod: !Ref BookingQueueExpiration
  GetRideFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get_ride_status/
      Handler: app.lambda_handler
      Runtime: python3.6
      Events: 
        FrabApi:
          Type: Api
          Properties:
            Path: /rides/{rideId}
            Method: get
      Environment: 
        Variables:
            DEFAULT_REGION: !Ref DefaultRegion
            RIDES_TABLE: !Select [1, !Split ['/', !GetAtt RidesTable.Arn]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RidesTable
  BookRideFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: rides/
      Handler: app.lambda_handler
      Runtime: python3.6
      Events:
        FrabApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /rides
            Method: post
      Policies:
       - DynamoDBCrudPolicy:
            TableName: !Ref RidesTable
       - SQSSendMessagePolicy:
            QueueName: !GetAtt BookingQueue.QueueName
      Environment: 
        Variables:
            DEFAULT_REGION: !Ref DefaultRegion
            BOOKING_QUEUE: !Ref BookingQueue
            RIDES_TABLE: !Select [1, !Split ['/', !GetAtt RidesTable.Arn]]
  AcceptRideRequestFunction: 
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: accept_ride_request/
      Handler: app.lambda_handler
      Runtime: python3.6
      Events: 
        FrabApi:
          Type: Api
          Properties:
            Path: /drivers/{driverId}/rides/{rideId}
            Method: put
      Environment: 
        Variables:
            DEFAULT_REGION: !Ref DefaultRegion
            RIDES_TABLE: !Select [1, !Split ['/', !GetAtt RidesTable.Arn]]
            DRIVERS_TABLE: !Select [1, !Split ['/', !GetAtt DriversTable.Arn]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RidesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DriversTable
  LocationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: drivers_location/
      Handler: app.lambda_handler
      Runtime: python3.6
      Events:
        Location:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /drivers/{driverId}/locations
            Method: put
      Environment:
        Variables:
          DRIVERS_TABLE: !Select [1, !Split ['/', !GetAtt DriversTable.Arn]]
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DriversTable
  RidesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: ride_id  
          AttributeType: S
      KeySchema: 
        - AttributeName: ride_id
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  DriversTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: driver_id  
          AttributeType: S
      KeySchema: 
        - AttributeName: driver_id
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5  
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  FrabApi:
    Description: "API Gateway endpoint URL for Prod stage for Book Ride function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/rides/"
  BookRideFunction:
    Description: "BookRideFunction Lambda Function ARN"
    Value: !GetAtt BookRideFunction.Arn
  BookRideFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt BookRideFunctionRole.Arn
